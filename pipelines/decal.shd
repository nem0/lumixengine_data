include "pipelines/common.glsl"

texture_slot {
	name = "Texture",
	uniform = "u_texture",
	default_texture = "textures/common/white.tga"
}

------------------

vertex_shader [[
	layout(location = 0) in vec3 a_position;
	layout(location = 1) in vec3 i_pos;
	layout(location = 2) in vec4 i_rot;
	layout(location = 3) in vec3 i_half_extents;
	out vec3 v_half_extents;
	out vec3 v_pos;
	out vec4 v_rot;
	void main()
	{
		v_pos = i_pos;
		v_rot = i_rot;
		v_half_extents = i_half_extents;
		vec3 pos = rotateByQuat(i_rot, a_position * i_half_extents);
		pos += i_pos;
		gl_Position = u_camera_projection * u_camera_view * vec4(pos, 1);
	}
]]

---------------------


fragment_shader [[
	layout(location = 0) out vec4 o_gbuffer0;
	layout(location = 1) out vec4 o_gbuffer1;
	layout(location = 2) out vec4 o_gbuffer2;
	
	in vec3 v_half_extents;
	in vec3 v_pos;
	in vec4 v_rot;
	
	layout (binding=0) uniform sampler2D u_texture;
	layout (binding=1) uniform sampler2D u_gbuffer_depth;
		
	void main()
	{
		vec2 screen_uv = gl_FragCoord.xy / u_framebuffer_size;
		vec3 wpos = getViewPosition(u_gbuffer_depth, u_camera_inv_view_projection, screen_uv);
		
		vec4 r = v_rot;
		r.w = -r.w;
		vec3 lpos = rotateByQuat(r, wpos - v_pos);
		if (any(greaterThan(abs(lpos), v_half_extents))) discard;
		
		vec4 color = texture(u_texture, lpos.xy / v_half_extents.xy * 0.5 + 0.5);
		if (color.a < 0.5) discard;

		o_gbuffer0 = vec4(color.rgb, 0);
		o_gbuffer1 = vec4(0, 0, 0, 0);
		o_gbuffer2 = vec4(0, 0, 0, 0);
	}
]]